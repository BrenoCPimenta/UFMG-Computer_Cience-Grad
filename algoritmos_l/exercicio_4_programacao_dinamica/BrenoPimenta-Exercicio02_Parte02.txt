/*
Pseudo codigo que recebe uma matriz
e retorna a submatriz com maior soma,
pertencente a matriz de entrada.
*/
def maximumRectangleSumProblem(x_matrix): 
    n_line <- getLineDimension( x_matrix )
    n_col <- getColumnDimension( x_matrix )
      
    //Posicoes finais da submatriz com maior soma
    init_line <- 0
    init_col <- 0
    end_line <- 0
    end_col <- 0

    //Posicoes de controle
    this_init_line <- 0
    this_end_line <- 0

    //Valores de controle
    max_sum <- -99999999
    this_sum <- 0


    //Percorre as colunas da matrix X  
    for this_init_col in range(n_col)
        
        //Ao mover a coluna inicial reinicia o valor da soma das colunas
        this_col_values <- []

        //Percorre as colunas, entre a coluna atual ate o final
        for this_end_col in between(this_init_col, n_col): 

            //Popula a soma das colunas
            for i in range(n_line):
                this_value <- x_matrix[i][this_end_col]
                if this_col_values[i] is Null: 
                    this_col_values[i] <- this_value
                else:
                    this_col_values[i] <- this_col_values[i] + this_value
              
            //Chamada de funcao, declarada mais abaixo no codigo
            //Retorna as posicoes da sequencia com maior soma do intervalo da coluna do loop
            (this_init_line, this_end_line, this_sum) = maximumSumSubarrayProblemIndexs (this_init_line, this_end_line, this_col_values)
  
            //Verifica se a soma do intervalo atual eh o maior
            if max_sum < this_sum:
                max_sum <- this_sum
                init_line <- this_init_line
                init_col <- this_init_col
                end_line <- this_end_line
                end_col <- this_end_col
    return x_matrix [init_line : end_line] [init_col : end_col]
    /*
    Obs: Lembrando que eh um pseudo codigo, logo 
    nao foi somado o valor um ao end_line e end_col no 
    final, como usualmente a syntaxe colon (:) requer,
    a titulo de entendiemento. Portanto caso seja 
    executado em uma linguagem como python eh necessario
    adicionar antes do return a seguinte linha:
        end_col += 1; end_line += 1
    */

/*
Pseudo codigo que recebe um array e 
posicoes inicial e final referente a
selecao anteriores e retorna o index 
inicial e final, quanto a soma do 
subarrray continuo com maior soma,
pertencente ao intervalo do array
de entrada.
(Modificacao da funcao do exercicio anterior)
*/
def maximumSumSubarrayProblemIndexs (init_sub_array, end_sub_array, x_array):
    n_size <- len( x_array )

    //Futura posicao inicial a cada zero encontrado:
    this_init <- 0

    //Valores de controle:
    max_sum <- -99999999
    this_sum <- 0

    for i in range(n_size):
        this_sum <- this_sum + x_array[i]

        if max_sum < this_sum:
            max_sum <- this_sum
            end_sub_array <- i
            init_sub_array <- this_init

        if this_sum < 0:
            this_sum <- 0
            this_init <- i + 1
            
    return (init_sub_array, end_sub_array, max_sum)